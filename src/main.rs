extern crate ansi_term;

use std::env;
use std::io;
use std::process;
use std::io::Write;
use ansi_term::Colour;
use ansi_term::Style;

static VERSION: &str = "0.0.1";
// static mut TEMP : &str = "NO TEMP";

fn main() {
    println!("Exploit {} created by Alwin T for {}.",VERSION,env::consts::OS);
    println!("Visit github https://github.com/alwinsDen/exploit");
    loop {
        print!("{}",Colour::Purple.paint(Style::new().bold().paint("EXPLOIT@".to_owned()
            +VERSION+">> ")
            .to_string
        ()));
        io::stdout().flush().unwrap();
        let mut input = String::new();
        io::stdin().read_line(&mut input)
            .expect("Wrong Input");
        // let input = input.trim();
        let mut arg_vec : Vec<String> = input.split_whitespace()
            .map(|x| x.trim().to_string()). collect();
        if arg_vec[0] == "exit()" {
            exit_function();
        }
        //clear
        else if arg_vec[0] == "clear" {
            clearer();
        }
        //summation
        else if arg_vec[0] == "SUM" || arg_vec[0] == "sum" {
            arg_vec.retain(|x| x != "sum");
            summation(&arg_vec);
        }
        else if arg_vec[0] == "LOOP" || arg_vec[0] == "loop" {
            if arg_vec.len() == 3 {looping(&arg_vec);}
            else if arg_vec.len() == 4 {adv_looping(&arg_vec)}
            else {wrong_input()}
        }
        else {
            if arg_vec[0] == "exit" {println!("Use exit() or Ctrl+c to exit");continue;}
            wrong_input();
        }
    }
}
fn exit_function() {
    println!("Exiting Usurper {}",VERSION);
    process::exit(0);
}
fn wrong_input() { println!("{}",Colour::Red.paint("Exploit doesnt recognize this command.")); }

fn clearer() { println!("{}",Colour::Yellow.paint("This function is under construction.")) }

//summation function
fn summation(x : &Vec<String>) {
    let mut tot_sum :i128 = 0;
    for ele in x.iter() {
        if ele=="SUM" || ele=="+" {continue;};
        tot_sum += ele.parse::<i128>().unwrap();
    }
    println!("{}",tot_sum);
}

//simple looping
fn looping(x: &Vec<String>) {
    let mut count = 0;
    while count < x[1].parse::<i128>().unwrap() {
        println!("{}",x[2]);
        count += 1;
    }
}

//calculation looping
fn adv_looping(x: &Vec<String>) {
    if x[3]=="+" {
        let mut tot_sum : i128 = 0;
        for _ele in 0..x[1].parse::<i128>().unwrap() {
            tot_sum += x[2].parse::<i128>().unwrap();
        }
        println!("{}",tot_sum);
    }
    else if x[3]=="*" || x[3]=="x" || x[3]=="X" {
        let tot_mul = x[1].parse::<i128>().unwrap()*x[2].parse::<i128>().unwrap();
        println!("{}",tot_mul);
    }
    else {println!("Invalid Operator")};
}