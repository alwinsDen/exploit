extern crate ansi_term;

use std::io;
use std::process;
use std::io::Write;
use ansi_term::Colour;
use ansi_term::Style;

static VERSION: &str = "1.1.32";

fn main() {
    println!("Exploit {} created by Alwin T.",VERSION);
    println!("Visit github https://github.com/alwinsDen");
    loop {
        print!("{}",Colour::Cyan.paint(Style::new().bold().paint("EXPLOIT@".to_owned()
            +VERSION+">> ")
            .to_string
        ()));
        io::stdout().flush().unwrap();
        let mut input = String::new();
        io::stdin().read_line(&mut input)
            .expect("Wrong Input");
        // let input = input.trim();
        let mut arg_vec : Vec<String> = input.split_whitespace()
            .map(|x| x.trim().to_string()). collect();
        if arg_vec[0] == "exit()" {
            exit_function();
        } else if arg_vec[0] == "clear" {
            clearer();
        } else if arg_vec[0] == "SUM" || arg_vec[0]=="sum" {
            arg_vec.retain(|x| x != "sum");
            summation(&arg_vec);
        } else {
            if arg_vec[0] == "exit" {println!("Use exit() or Ctrl+c to exit");continue;}
            wrong_input();
        }
    }
}
fn exit_function() {
    println!("Exiting Usurper {}",VERSION);
    process::exit(0);
}
fn wrong_input() { println!("{}",Colour::Red.paint("Usurper doesnt recognize this command.")); }
fn clearer() { println!("{}",Colour::Yellow.paint("This function is under construction.")) }
fn summation(x : &Vec<String>) {
    let mut tot_sum :i64 = 0;
    for ele in x.iter() {
        if ele=="SUM" || ele=="+" {continue;};
        tot_sum += ele.parse::<i64>().unwrap();
    }
    println!("{}",tot_sum);
}